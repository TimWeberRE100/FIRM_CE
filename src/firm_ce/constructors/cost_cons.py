from typing import Optional

from firm_ce.system.components import Fuel
from firm_ce.system.costs import UnitCost, UnitCost_InstanceType


def construct_UnitCost_object(
    capex_p: float,
    fom: float,
    vom: float,
    lifetime: int,
    discount_rate: float,
    heat_rate_base: float = 0.0,
    heat_rate_incr: float = 0.0,
    fuel: Optional[Fuel] = None,
    capex_e: float = 0.0,
    transformer_capex: float = 0.0,
) -> UnitCost_InstanceType:
    """
    Takes data required to initialise a single UnitCost object, casts values into Numba-compatible
    types, and returns an instance of the UnitCost jitclass. The UnitCost is a dataclass that
    stores all cost input assumptions for a Generator, Storage, or Line object.

    Parameters:
    -------
    capex_p (float): The power capacity capital cost [$/kW].
    fom (float): The fixed operation and maintenance cost [$/kW-year].
    vom (float): The variable operation and maintenance cost [$/MWh].
    lifetime (int): The economic lifetime of the asset [years].
    discount_rate (float): The discount rate for the asset [0,1).
    heat_rate_base (float): The first coefficient in the fuel heat rate function, associated with
        hours of operation for a single generation unit [GJ/hour].
    heat_rate_incr (float): The second coefficient in the fuel heat rate function, associated with
        electricity generated by the generator [GJ/MWh]. Can also be used to define an average heat
        rate when unit size is unknown (requires heat_rate_base = 0.0).
    fuel (Optional[Fuel]): The fuel used to generate electricity. For assets that are not Generators,
        value is None.
    capex_e (float): The energy capacity capital cost [$/kWh].
    transformer_capex (float): The capital cost of transformers associated with a line [$/MW].

    Returns:
    -------
    UnitCost_InstanceType: A static instance of the UnitCost jitclass.
    """

    fuel_cost_mwh = 0.0
    fuel_cost_h = 0.0
    if fuel:
        fuel_cost_mwh = fuel.cost * heat_rate_incr
        fuel_cost_h = fuel.cost * heat_rate_base

    return UnitCost(
        capex_p,
        fom,
        vom,
        lifetime,
        discount_rate,
        fuel_cost_mwh,
        fuel_cost_h,
        capex_e,
        transformer_capex,
    )
